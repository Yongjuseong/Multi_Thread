혼자 공부 c++ / multi thread

Process(CPU 코어에서 실행) ? 운영체제에서 실행되는 프로그램의 최소 단위

Thread - CPU코어에서 돌아가는 프로그램 단위 (다른 프로세스와 메모리 공유 x)
  
멀티 스레드 - 하나의 프로세스 내에서 둘 이상의 스레디가 동시에 작업수행
	      여러 개의 CPU를 사용하여 여러 프로세스를 동시에 수행 하는 것

Common things between Multi thread and Multi process
- 여러 흐름을 동시에 수행

Differnt between Multi thread and Multi process
- Multi process : 각 프로세스가 독립적인 메모리를 가지고 별도로 실행
- Multi thread : 각 스레드가 자신이 속한 프로세스의 메모리를 공유한다는 점
  Multi thread merits --> 1. 시스템 자원의 낭비가 적다.
	 	      2. 하나의 스레드가 작업을 할 떄 다른 스레드가 별도의 작업을 할 수 있어서 사용자와의 응답성도 좋아진다.

Context Swithcing
- 스레드가 서로 교체될 때 발생되는 것으로, 현재까지의 작업상태나 다음 작업에 필요한 각종 데이터를 저장하고 읽어오는 작업
- 컴퓨터에서 한번에 동시에 처리할 수 있는 최대 작업 수 = CPU의 코어수
if CPU의 코어 수보다 많은 스레드가 실행 -> 연속적으로 실행 X ("컨텍스트 스위칭(Context switching)")
프로그램 하나가 잠시 실행되었다가, 다른 프로그램으로 스위칭 된다. 
즉, CPU 는 한 프로그램을 통째로 쭉 실행시키는 것이 아니라, 이 프로그램 조금, 저 프로그램 조금씩 골라 차례를 돌며 실행.
- 문맥교환에 걸리는 시간이 커지면 => 멀티 스레딩의 효율 저하 -> 언제나 멀티 스레드 이용이 성능이 좋은 것은 아니가.


CPU 는 운영체제가 처리하라고 시키는 명령어들을 실행,
어떤 프로그램을 실행시키고, 얼마 동안 실행 시키고, 또 다음에 무슨 프로그램으로 스위치 할지는 "운영체제의 스케쥴러(scheduler)" 알아서 결정

Why multi-thread?
1. 병렬 가능한 작업들 (Parallelizable tasks) - 시간절약 (ex 10000초 걸리는거 -> 10개로 나누면 1010초)
   But , 코드상 서로 의존성이 존재하는경우 ,병렬화가 어려워 진다. (단순 경우에만 병렬화의 경우 멀티스레드로 구현 시 시간 절약)

2. 대기시간이 긴 작업들(Long waiting time tasks) ex) 인터넷에서 웹 사이트등을 가져오는 경우 ( bc CPU속도 >>>인터넷속도)



<예제 코드>--- 결과
처음에 쓰레드 1 작동중! 이 조금 나오다가, 쓰레드 3 작동중! 이 나옵니다. 
그 다음에 쓰레드 2 작동중! 또 나오다가, 뒤죽 박죽 순서가 바뀌어서 나오는 것을 볼 수 있습니다. 
또한 프로그램을 실행 할 때 마다 그 결과가 달라진다는 점입니다. 
운영체제가 쓰레드들을 어떤 코어에 할당하고, 또 어떤 순서로 스케쥴 할지는 그 때 그 때 마다 상황에 맞게 바뀌기 때문에 그 결과를 정확히 예측할 수 없습니다.

join() 은, 해당하는 쓰레드들이 실행을 종료하면 리턴하는 함수


If join이 없다면  =>  쓰레드들의 내용이 채 실행되기 전에 main 함수가 종료되어서 쓰레드 객체들 (t1, t2, t3)의 소멸자가 호출

C++ 표준에 따르면, join 되거나 detach 되지 않는 쓰레드들의 소멸자가 호출된다면 예외를 발생시키도록 명시.

detach 는 말 그대로, 해당 쓰레드를 실행 시킨 후, 잊어버리는 것 =>  대신 쓰레드는 알아서 백그라운드에서 돌아가게 됩니다

쓰레드는 리턴값 이란것이 없기 때문에 만일 어떠한 결과를 반환하고 싶다면 포인터의 형태로 전달


참고자료 출처: https://modoocode.com/269



